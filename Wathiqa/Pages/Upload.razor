@page "/upload"
@using Wathiqa.Data
@inject WeatherForecastService ForecastService

<PageTitle>Upload Document</PageTitle>

<h1>Upload Document</h1>

<p>This component demonstrates uploading document to Wathiqa system</p>

<MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles">
    <ButtonTemplate>
        <MudButton HtmlTag="label"
                   Variant="Variant.Filled"
                   Color="Color.Primary"
                   StartIcon="@Icons.Material.Filled.CloudUpload"
                   for="@context">
            Upload Files
        </MudButton>
    </ButtonTemplate>
</MudFileUpload>



<div>
    <p>@ErrorMessage</p>
</div>
@if (imageSources == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @foreach (var imageSource in imageSources)
    {
        <MudImage Src="@imageSource" Width="200" Height="150" Alt="Swedish Farm House" Elevation="25" Class="rounded-lg ma-4" />
    }
}


@code {
    private List<string> imageSources = new List<string>();
    private const int maxAllowedFiles = 2;
    private string ErrorMessage;

    async Task OnChange(InputFileChangeEventArgs e)
    {
        imageSources.Clear();
        ErrorMessage = string.Empty;
        if (e.FileCount > maxAllowedFiles)
        {
            ErrorMessage = $"Only {maxAllowedFiles} files can be uploaded";
            return;
        }
        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            using var stream = file.OpenReadStream();
            using var ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            imageSources.Add( $"data:{file.ContentType};base64,{Convert.ToBase64String(ms.ToArray())}");

        }
    }



    async Task UploadFiles(IBrowserFile file)
    {
        imageSources.Clear();
        using var stream = file.OpenReadStream();
        using var ms = new MemoryStream();
        await stream.CopyToAsync(ms);
        imageSources.Add($"data:{file.ContentType};base64,{Convert.ToBase64String(ms.ToArray())}");
    }
}
